on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: Install dependencies
        run: npm install

      - name: Cache Playwright dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/playwright.config.js') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
      - name: Install Playwright
        run: npx playwright install

      - name: Run Infinite tests
        run: npm run test

      - name: Upload test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-report-${{ matrix.os }}
          path: |
            ./assets
            ./features
            ./test-result
            ./test-results
            index.html

  jmeter-lirmi-test:
    runs-on: ubuntu-latest

    container:
      image: justb4/jmeter:latest

    steps:
      - uses: actions/checkout@v4

      - name: Ejecutar pruebas JMeter 
        run: |
          jmeter -n -t jmeter/Asistencia_mensual.jmx -l resultados.jtl
          jmeter -g resultados.jtl -e -o report_folder
      - name: Generar archivo CSV desde JTL
        run: |
          echo "timestamp,elapsed,label,responseCode,responseMessage,success,bytes,grpThreads,allThreads,Latency" > resultados.csv
          awk -F',' '{print $1","$2","$3","$4","$5","$6","$7","$8","$9","$10}' resultados.jtl >> resultados.csv
      - name: Subir archivos de resultados
        uses: actions/upload-artifact@v4
        with:
          name: resultados-jmeter
          path: |
            resultados.jtl
            report_folder
            resultados.csv

  send-slack-message:
    runs-on: ubuntu-latest
    needs: [jmeter-lirmi-test]  # Espera a que termine jmeter-lirmi-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: resultados-jmeter
          path: report_folder  # Ruta donde se descargar√° el artifact

      - name: Send Slack message
        uses: Ilshidur/action-slack@master
        with:
          status: ${{ job.status }}
          text: "Send test results"
          author_name: "GitHub Actions"
          attachments: |
            [
              {
                "title": "report_folder",
                "text": "$(cat report_folder)"
              }
            ]
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
